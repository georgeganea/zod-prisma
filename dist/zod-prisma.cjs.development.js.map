{"version":3,"file":"zod-prisma.cjs.development.js","sources":["../src/config.ts","../src/util.ts","../src/docs.ts","../src/types.ts","../src/generator.ts","../src/index.ts"],"sourcesContent":["import { z } from 'zod'\n\nconst configBoolean = z.enum(['true', 'false']).transform((arg) => JSON.parse(arg))\n\nexport const configSchema = z.object({\n\trelationModel: configBoolean.default('true').or(z.literal('default')),\n\tmodelSuffix: z.string().default('Model'),\n\tmodelCase: z.enum(['PascalCase', 'camelCase']).default('PascalCase'),\n\tuseDecimalJs: configBoolean.default('false'),\n\timports: z.string().optional(),\n\tprismaJsonNullability: configBoolean.default('true'),\n})\n\nexport type Config = z.infer<typeof configSchema>\n\nexport type PrismaOptions = {\n\tschemaPath: string\n\toutputPath: string\n\tclientPath: string\n}\n\nexport type Names = {\n\tmodel: string\n\trelated: string\n}\n","import { DMMF } from '@prisma/generator-helper'\nimport type { CodeBlockWriter } from 'ts-morph'\nimport { Config } from './config'\n\nexport const writeArray = (writer: CodeBlockWriter, array: string[], newLine = true) =>\n\tarray.forEach((line) => writer.write(line).conditionalNewLine(newLine))\n\nexport const useModelNames = ({ modelCase, modelSuffix, relationModel }: Config) => {\n\tconst formatModelName = (name: string, prefix = '') => {\n\t\tif (modelCase === 'camelCase') {\n\t\t\tname = name.slice(0, 1).toLowerCase() + name.slice(1)\n\t\t}\n\t\treturn `${prefix}${name}${modelSuffix}`\n\t}\n\n\treturn {\n\t\tmodelName: (name: string) => formatModelName(name, relationModel === 'default' ? '_' : ''),\n\t\trelatedModelName: (name: string | DMMF.SchemaEnum | DMMF.OutputType | DMMF.SchemaArg) =>\n\t\t\tformatModelName(\n\t\t\t\trelationModel === 'default' ? name.toString() : `Related${name.toString()}`\n\t\t\t),\n\t}\n}\n\nexport const needsRelatedModel = (model: DMMF.Model, config: Config) =>\n\tmodel.fields.some((field) => field.kind === 'object') && config.relationModel !== false\n\nexport const chunk = <T extends any[]>(input: T, size: number): T[] => {\n\treturn input.reduce((arr, item, idx) => {\n\t\treturn idx % size === 0\n\t\t\t? [...arr, [item]]\n\t\t\t: [...arr.slice(0, -1), [...arr.slice(-1)[0], item]]\n\t}, [])\n}\n\nexport const dotSlash = (input: string) => {\n\tconst converted = input\n\t\t.replace(/^\\\\\\\\\\?\\\\/, '')\n\t\t.replace(/\\\\/g, '/')\n\t\t.replace(/\\/\\/+/g, '/')\n\n\tif (converted.includes(`/node_modules/`)) return converted.split(`/node_modules/`).slice(-1)[0]\n\n\tif (converted.startsWith(`../`)) return converted\n\n\treturn './' + converted\n}\n","import { ArrayTree, parse, stringify } from 'parenthesis'\nimport { chunk } from './util'\n\nexport const getJSDocs = (docString?: string) => {\n\tconst lines: string[] = []\n\n\tif (docString) {\n\t\tconst docLines = docString.split('\\n').filter((dL) => !dL.trimStart().startsWith('@zod'))\n\n\t\tif (docLines.length) {\n\t\t\tlines.push('/**')\n\t\t\tdocLines.forEach((dL) => lines.push(` * ${dL}`))\n\t\t\tlines.push(' */')\n\t\t}\n\t}\n\n\treturn lines\n}\n\nexport const getZodDocElements = (docString: string) =>\n\tdocString\n\t\t.split('\\n')\n\t\t.filter((line) => line.trimStart().startsWith('@zod'))\n\t\t.map((line) => line.trimStart().slice(4))\n\t\t.flatMap((line) =>\n\t\t\t// Array.from(line.matchAll(/\\.([^().]+\\(.*?\\))/g), (m) => m.slice(1)).flat()\n\t\t\tchunk(parse(line), 2)\n\t\t\t\t.slice(0, -1)\n\t\t\t\t.map(\n\t\t\t\t\t([each, contents]) =>\n\t\t\t\t\t\t(each as string).replace(/\\)?\\./, '') +\n\t\t\t\t\t\t`${stringify(contents as ArrayTree)})`\n\t\t\t\t)\n\t\t)\n\nexport const computeCustomSchema = (docString: string) => {\n\treturn getZodDocElements(docString)\n\t\t.find((modifier) => modifier.startsWith('custom('))\n\t\t?.slice(7)\n\t\t.slice(0, -1)\n}\n\nexport const computeModifiers = (docString: string) => {\n\treturn getZodDocElements(docString).filter((each) => !each.startsWith('custom('))\n}\n","import type { DMMF } from '@prisma/generator-helper'\nimport { computeCustomSchema, computeModifiers } from './docs'\n\nexport const getZodConstructor = (\n\tfield: DMMF.Field,\n\tgetRelatedModelName = (name: string | DMMF.SchemaEnum | DMMF.OutputType | DMMF.SchemaArg) =>\n\t\tname.toString()\n) => {\n\tlet zodType = 'z.unknown()'\n\tlet extraModifiers: string[] = ['']\n\tif (field.kind === 'scalar') {\n\t\tswitch (field.type) {\n\t\t\tcase 'String':\n\t\t\t\tzodType = 'z.string()'\n\t\t\t\tbreak\n\t\t\tcase 'Int':\n\t\t\t\tzodType = 'z.number()'\n\t\t\t\textraModifiers.push('int()')\n\t\t\t\tbreak\n\t\t\tcase 'BigInt':\n\t\t\t\tzodType = 'z.bigint()'\n\t\t\t\tbreak\n\t\t\tcase 'DateTime':\n\t\t\t\tzodType = 'z.date()'\n\t\t\t\tbreak\n\t\t\tcase 'Float':\n\t\t\t\tzodType = 'z.number()'\n\t\t\t\tbreak\n\t\t\tcase 'Decimal':\n\t\t\t\tzodType = 'z.number()'\n\t\t\t\tbreak\n\t\t\tcase 'Json':\n\t\t\t\tzodType = 'jsonSchema'\n\t\t\t\tbreak\n\t\t\tcase 'Boolean':\n\t\t\t\tzodType = 'z.boolean()'\n\t\t\t\tbreak\n\t\t\t// TODO: Proper type for bytes fields\n\t\t\tcase 'Bytes':\n\t\t\t\tzodType = 'z.unknown()'\n\t\t\t\tbreak\n\t\t}\n\t} else if (field.kind === 'enum') {\n\t\tzodType = `z.nativeEnum(${field.type}).describe('enums.${field.type}')`\n\t} else if (field.kind === 'object') {\n\t\tzodType = getRelatedModelName(field.type)\n\t}\n\n\tif (field.isList) extraModifiers.push('array()')\n\tif (field.documentation) {\n\t\tzodType = computeCustomSchema(field.documentation) ?? zodType\n\t\textraModifiers.push(...computeModifiers(field.documentation))\n\t}\n\tif (!field.isRequired && field.type !== 'Json') extraModifiers.push('nullish()')\n\t// if (field.hasDefaultValue) extraModifiers.push('optional()')\n\n\treturn `${zodType}${extraModifiers.join('.')}`\n}\n","import path from 'path'\nimport { DMMF } from '@prisma/generator-helper'\nimport {\n\tImportDeclarationStructure,\n\tSourceFile,\n\tStructureKind,\n\tVariableDeclarationKind,\n} from 'ts-morph'\nimport { Config, PrismaOptions } from './config'\nimport { dotSlash, needsRelatedModel, useModelNames, writeArray } from './util'\nimport { getJSDocs } from './docs'\nimport { getZodConstructor } from './types'\n\nexport const writeImportsForModel = (\n\tmodel: DMMF.Model,\n\tsourceFile: SourceFile,\n\tconfig: Config,\n\t{ schemaPath, outputPath, clientPath }: PrismaOptions\n) => {\n\tconst { relatedModelName } = useModelNames(config)\n\tconst importList: ImportDeclarationStructure[] = [\n\t\t{\n\t\t\tkind: StructureKind.ImportDeclaration,\n\t\t\tnamespaceImport: 'z',\n\t\t\tmoduleSpecifier: 'zod',\n\t\t},\n\t]\n\n\tif (config.imports) {\n\t\timportList.push({\n\t\t\tkind: StructureKind.ImportDeclaration,\n\t\t\tnamespaceImport: 'imports',\n\t\t\tmoduleSpecifier: dotSlash(\n\t\t\t\tpath.relative(outputPath, path.resolve(path.dirname(schemaPath), config.imports))\n\t\t\t),\n\t\t})\n\t}\n\n\tif (config.useDecimalJs && model.fields.some((f) => f.type === 'Decimal')) {\n\t\timportList.push({\n\t\t\tkind: StructureKind.ImportDeclaration,\n\t\t\tnamedImports: ['Decimal'],\n\t\t\tmoduleSpecifier: 'decimal.js',\n\t\t})\n\t}\n\n\tconst enumFields = model.fields.filter((f) => f.kind === 'enum')\n\tconst relationFields = model.fields.filter((f) => f.kind === 'object')\n\tconst relativePath = path.relative(outputPath, clientPath)\n\n\tif (enumFields.length > 0) {\n\t\timportList.push({\n\t\t\tkind: StructureKind.ImportDeclaration,\n\t\t\tisTypeOnly: enumFields.length === 0,\n\t\t\tmoduleSpecifier: dotSlash(relativePath),\n\t\t\tnamedImports: enumFields.map((f) => f.type),\n\t\t})\n\t}\n\n\tif (config.relationModel !== false && relationFields.length > 0) {\n\t\tconst filteredFields = relationFields.filter((f) => f.type !== model.name)\n\n\t\tif (filteredFields.length > 0) {\n\t\t\timportList.push({\n\t\t\t\tkind: StructureKind.ImportDeclaration,\n\t\t\t\tmoduleSpecifier: './index',\n\t\t\t\tnamedImports: Array.from(\n\t\t\t\t\tnew Set(\n\t\t\t\t\t\tfilteredFields.flatMap((f) => [\n\t\t\t\t\t\t\t`Complete${f.type}`,\n\t\t\t\t\t\t\trelatedModelName(f.type),\n\t\t\t\t\t\t])\n\t\t\t\t\t)\n\t\t\t\t),\n\t\t\t})\n\t\t}\n\t}\n\n\tsourceFile.addImportDeclarations(importList)\n}\n\nexport const writeTypeSpecificSchemas = (\n\tmodel: DMMF.Model,\n\tsourceFile: SourceFile,\n\tconfig: Config,\n\t_prismaOptions: PrismaOptions\n) => {\n\tif (model.fields.some((f) => f.type === 'Json')) {\n\t\tsourceFile.addStatements((writer) => {\n\t\t\twriter.newLine()\n\t\t\twriteArray(writer, [\n\t\t\t\t'// Helper schema for JSON fields',\n\t\t\t\t`type Literal = boolean | number | string${\n\t\t\t\t\tconfig.prismaJsonNullability ? '' : '| null'\n\t\t\t\t}`,\n\t\t\t\t'type Json = Literal | { [key: string]: Json } | Json[]',\n\t\t\t\t`const literalSchema = z.union([z.string(), z.number(), z.boolean()${\n\t\t\t\t\tconfig.prismaJsonNullability ? '' : ', z.null()'\n\t\t\t\t}])`,\n\t\t\t\t'const jsonSchema: z.ZodSchema<Json> = z.lazy(() => z.union([literalSchema, z.array(jsonSchema), z.record(jsonSchema)]))',\n\t\t\t])\n\t\t})\n\t}\n\n\tif (config.useDecimalJs && model.fields.some((f) => f.type === 'Decimal')) {\n\t\tsourceFile.addStatements((writer) => {\n\t\t\twriter.newLine()\n\t\t\twriteArray(writer, [\n\t\t\t\t'// Helper schema for Decimal fields',\n\t\t\t\t'z',\n\t\t\t\t'.instanceof(Decimal)',\n\t\t\t\t'.or(z.string())',\n\t\t\t\t'.or(z.number())',\n\t\t\t\t'.refine((value) => {',\n\t\t\t\t'  try {',\n\t\t\t\t'    return new Decimal(value);',\n\t\t\t\t'  } catch (error) {',\n\t\t\t\t'    return false;',\n\t\t\t\t'  }',\n\t\t\t\t'})',\n\t\t\t\t'.transform((value) => new Decimal(value));',\n\t\t\t])\n\t\t})\n\t}\n}\n\nexport const generateSchemaForModel = (\n\tmodel: DMMF.Model,\n\tsourceFile: SourceFile,\n\tconfig: Config,\n\t_prismaOptions: PrismaOptions\n) => {\n\tconst { modelName } = useModelNames(config)\n\n\tsourceFile.addVariableStatement({\n\t\tdeclarationKind: VariableDeclarationKind.Const,\n\t\tisExported: true,\n\t\tleadingTrivia: (writer) => writer.blankLineIfLastNot(),\n\t\tdeclarations: [\n\t\t\t{\n\t\t\t\tname: modelName(model.name),\n\t\t\t\tinitializer(writer) {\n\t\t\t\t\twriter\n\t\t\t\t\t\t.write('z.object(')\n\t\t\t\t\t\t.inlineBlock(() => {\n\t\t\t\t\t\t\tmodel.fields\n\t\t\t\t\t\t\t\t.filter((f) => f.kind !== 'object')\n\t\t\t\t\t\t\t\t.forEach((field) => {\n\t\t\t\t\t\t\t\t\twriteArray(writer, getJSDocs(field.documentation))\n\t\t\t\t\t\t\t\t\twriter\n\t\t\t\t\t\t\t\t\t\t.write(`${field.name}: ${getZodConstructor(field)}`)\n\t\t\t\t\t\t\t\t\t\t.write(',')\n\t\t\t\t\t\t\t\t\t\t.newLine()\n\t\t\t\t\t\t\t\t})\n\t\t\t\t\t\t})\n\t\t\t\t\t\t.write(')')\n\t\t\t\t},\n\t\t\t},\n\t\t],\n\t})\n}\n\nexport const generateRelatedSchemaForModel = (\n\tmodel: DMMF.Model,\n\tsourceFile: SourceFile,\n\tconfig: Config,\n\t_prismaOptions: PrismaOptions\n) => {\n\tconst { modelName, relatedModelName } = useModelNames(config)\n\n\tconst relationFields = model.fields.filter((f) => f.kind === 'object')\n\n\tsourceFile.addInterface({\n\t\tname: `Complete${model.name}`,\n\t\tisExported: true,\n\t\textends: [`z.infer<typeof ${modelName(model.name)}>`],\n\t\tproperties: relationFields.map((f) => ({\n\t\t\thasQuestionToken: !f.isRequired,\n\t\t\tname: f.name,\n\t\t\ttype: `Complete${f.type}${f.isList ? '[]' : ''}${!f.isRequired ? ' | null' : ''}`,\n\t\t})),\n\t})\n\n\tsourceFile.addStatements((writer) =>\n\t\twriteArray(writer, [\n\t\t\t'',\n\t\t\t'/**',\n\t\t\t` * ${relatedModelName(\n\t\t\t\tmodel.name\n\t\t\t)} contains all relations on your model in addition to the scalars`,\n\t\t\t' *',\n\t\t\t' * NOTE: Lazy required in case of potential circular dependencies within schema',\n\t\t\t' */',\n\t\t])\n\t)\n\n\tsourceFile.addVariableStatement({\n\t\tdeclarationKind: VariableDeclarationKind.Const,\n\t\tisExported: true,\n\t\tdeclarations: [\n\t\t\t{\n\t\t\t\tname: relatedModelName(model.name),\n\t\t\t\ttype: `z.ZodSchema<Complete${model.name}>`,\n\t\t\t\tinitializer(writer) {\n\t\t\t\t\twriter\n\t\t\t\t\t\t.write(`z.lazy(() => ${modelName(model.name)}.extend(`)\n\t\t\t\t\t\t.inlineBlock(() => {\n\t\t\t\t\t\t\trelationFields.forEach((field) => {\n\t\t\t\t\t\t\t\twriteArray(writer, getJSDocs(field.documentation))\n\n\t\t\t\t\t\t\t\twriter\n\t\t\t\t\t\t\t\t\t.write(\n\t\t\t\t\t\t\t\t\t\t`${field.name}: ${getZodConstructor(\n\t\t\t\t\t\t\t\t\t\t\tfield,\n\t\t\t\t\t\t\t\t\t\t\trelatedModelName\n\t\t\t\t\t\t\t\t\t\t)}`\n\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t\t.write(',')\n\t\t\t\t\t\t\t\t\t.newLine()\n\t\t\t\t\t\t\t})\n\t\t\t\t\t\t})\n\t\t\t\t\t\t.write('))')\n\t\t\t\t},\n\t\t\t},\n\t\t],\n\t})\n}\n\nexport const populateModelFile = (\n\tmodel: DMMF.Model,\n\tsourceFile: SourceFile,\n\tconfig: Config,\n\tprismaOptions: PrismaOptions\n) => {\n\twriteImportsForModel(model, sourceFile, config, prismaOptions)\n\twriteTypeSpecificSchemas(model, sourceFile, config, prismaOptions)\n\tgenerateSchemaForModel(model, sourceFile, config, prismaOptions)\n\tif (needsRelatedModel(model, config))\n\t\tgenerateRelatedSchemaForModel(model, sourceFile, config, prismaOptions)\n}\n\nexport const generateBarrelFile = (models: DMMF.Model[], indexFile: SourceFile) => {\n\tmodels.forEach((model) =>\n\t\tindexFile.addExportDeclaration({\n\t\t\tmoduleSpecifier: `./${model.name.toLowerCase()}`,\n\t\t})\n\t)\n}\n","// @ts-ignore Importing package.json for automated synchronization of version numbers\nimport { version } from '../package.json'\n\nimport { generatorHandler } from '@prisma/generator-helper'\nimport { SemicolonPreference } from 'typescript'\nimport { configSchema, PrismaOptions } from './config'\nimport { populateModelFile, generateBarrelFile } from './generator'\nimport { Project } from 'ts-morph'\n\ngeneratorHandler({\n\tonManifest() {\n\t\treturn {\n\t\t\tversion,\n\t\t\tprettyName: 'Zod Schemas',\n\t\t\tdefaultOutput: 'zod',\n\t\t}\n\t},\n\tonGenerate(options) {\n\t\tconst project = new Project()\n\n\t\tconst models = options.dmmf.datamodel.models\n\n\t\tconst { schemaPath } = options\n\t\tconst outputPath = options.generator.output!.value\n\t\tconst clientPath = options.otherGenerators.find(\n\t\t\t(each) => each.provider.value === 'prisma-client-js'\n\t\t)!.output!.value!\n\n\t\tconst results = configSchema.safeParse(options.generator.config)\n\t\tif (!results.success)\n\t\t\tthrow new Error(\n\t\t\t\t'Incorrect config provided. Please check the values you provided and try again.'\n\t\t\t)\n\n\t\tconst config = results.data\n\t\tconst prismaOptions: PrismaOptions = {\n\t\t\tclientPath,\n\t\t\toutputPath,\n\t\t\tschemaPath,\n\t\t}\n\n\t\tconst indexFile = project.createSourceFile(\n\t\t\t`${outputPath}/index.ts`,\n\t\t\t{},\n\t\t\t{ overwrite: true }\n\t\t)\n\n\t\tgenerateBarrelFile(models, indexFile)\n\n\t\tindexFile.formatText({\n\t\t\tindentSize: 2,\n\t\t\tconvertTabsToSpaces: true,\n\t\t\tsemicolons: SemicolonPreference.Remove,\n\t\t})\n\n\t\tmodels.forEach((model) => {\n\t\t\tconst sourceFile = project.createSourceFile(\n\t\t\t\t`${outputPath}/${model.name.toLowerCase()}.ts`,\n\t\t\t\t{},\n\t\t\t\t{ overwrite: true }\n\t\t\t)\n\n\t\t\tpopulateModelFile(model, sourceFile, config, prismaOptions)\n\n\t\t\tsourceFile.formatText({\n\t\t\t\tindentSize: 2,\n\t\t\t\tconvertTabsToSpaces: true,\n\t\t\t\tsemicolons: SemicolonPreference.Remove,\n\t\t\t})\n\t\t})\n\n\t\treturn project.save()\n\t},\n})\n"],"names":["configBoolean","z","enum","transform","arg","JSON","parse","configSchema","object","relationModel","default","or","literal","modelSuffix","string","modelCase","useDecimalJs","imports","optional","prismaJsonNullability","writeArray","writer","array","newLine","forEach","line","write","conditionalNewLine","useModelNames","formatModelName","name","prefix","slice","toLowerCase","modelName","relatedModelName","toString","needsRelatedModel","model","config","fields","some","field","kind","chunk","input","size","reduce","arr","item","idx","dotSlash","converted","replace","includes","split","startsWith","getJSDocs","docString","lines","docLines","filter","dL","trimStart","length","push","getZodDocElements","map","flatMap","each","contents","stringify","computeCustomSchema","_getZodDocElements$fi","find","modifier","computeModifiers","getZodConstructor","getRelatedModelName","zodType","extraModifiers","type","isList","documentation","_computeCustomSchema","isRequired","join","writeImportsForModel","sourceFile","schemaPath","outputPath","clientPath","importList","StructureKind","ImportDeclaration","namespaceImport","moduleSpecifier","path","relative","resolve","dirname","f","namedImports","enumFields","relationFields","relativePath","isTypeOnly","filteredFields","Array","from","Set","addImportDeclarations","writeTypeSpecificSchemas","_prismaOptions","addStatements","generateSchemaForModel","addVariableStatement","declarationKind","VariableDeclarationKind","Const","isExported","leadingTrivia","blankLineIfLastNot","declarations","initializer","inlineBlock","generateRelatedSchemaForModel","addInterface","extends","properties","hasQuestionToken","populateModelFile","prismaOptions","generateBarrelFile","models","indexFile","addExportDeclaration","generatorHandler","onManifest","version","prettyName","defaultOutput","onGenerate","options","project","Project","dmmf","datamodel","generator","output","value","otherGenerators","provider","results","safeParse","success","Error","data","createSourceFile","overwrite","formatText","indentSize","convertTabsToSpaces","semicolons","SemicolonPreference","Remove","save"],"mappings":"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"}